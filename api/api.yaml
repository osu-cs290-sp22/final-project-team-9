openapi: '3.0.0'
info:
  version: 1.0.0
  title: SmartLists
servers:
  - url: /api
paths:
  /:
    get:
      description: API Home Page
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
  /auth/refresh:
    get:
      description: Refresh Access Token
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
  /auth/session:
    get:
      description: Retrieve Session Data
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
  /auth/callback:
    get:
      security: []  
      description: Handle Spotify Auth Callback
      parameters:
        - name: code
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
  /auth/login:
    get:
      security: []  
      description: Start Spotify Auth Flow
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
  /auth/logout:
    get:
      security: []  
      description: End Auth Session
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
  /featuredPlaylists:
    get:
      security: []  
      description: Retrieve latest list of featured playlists from cache.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
  /featuredPlaylists/update:
    get: 
      description: Update featured playlist cache if out of date
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
  /playback/play:
    get:
      description: Play song
      parameters:
        - name: device_id
          in: query
          required: true
          schema:
            type: string
        - name: uri
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
  /playback/pause:
    get:
      description: Pause song
      parameters:
        - name: device_id
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
  /playlists:
    get:
      description: Retrieve all followed playlists. If option is 1, playlists returned without changes. If option is 2, only return non-made for you playlists. If option is 3, only return made for you playlists. If option is 4, return all playlists with made for you at top of results.
      parameters:
        - name: option
          in: query
          required: false
          schema:
            type: number
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
  /playlists/search:
    get:
      description: Search for a playlist. If public is false or omitted, will search followed playlists only.
      parameters:
        - name: query
          in: query
          required: true
          schema:
            type: string
        - name: public
          in: query
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
  /playlists/{id}:
    get:
      description: Retrieve a single playlist
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
  /playlists/{id}/metadata:
    get:
      description: Retrieve list of tracks and associated metadata for a playlist. 
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
  /playlists/{id}/share:
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                variables:
                  type: array
      description: Cache a playlist for sharing. 
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
  /playlists/{id}/save:
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                variables:
                  type: array
                image:
                  type: string
      description: Save playlist graph to session. 
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
  /playlists/snapshot/{id}:
    get:
      security: []  
      description: Retrieve playlist snapshot
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
  /playlists/public/{id}:
    get:
      security: []  
      description: Retrieve public playlist from cache
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object

components:
  securitySchemes:
    CookieAuth:
      type: apiKey
      in: cookie
      name: sl_session

security:
  - CookieAuth: []