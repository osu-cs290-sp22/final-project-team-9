<div id="left">
    <div id="inner">
        <h1 class="text-4xl" id="pageTitle">Configure your first graph</h1>
        <p>Choose the type of graph and variables you would like to visualize.</p>
        <form id="graph-configure-form" action="javascript:void(0);">
            <br>
            <h2>Graph Type</h2>
            <div class="input-group" style="padding-top:3%;">
                <select id="graphPicker" class="selectpicker" data-size="4" data-width="100%" required>
                    <optgroup label="2D">
                        <option value="bar" data-size="1">Bar</option>
                        <option value="scatter" data-size="2">Scatter</option>
                    </optgroup>
                    <optgroup label="3D">
                        <option value="bar3d" data-size="3">Bar</option>
                        <option value="scatter3d" data-size="3">Scatter</option>
                    </optgroup>
                    {{!-- <option value="pie" data-size="1">Pie</option> --}}
                    {{!-- <option value="line" data-size="2">Line</option> --}}
                </select>
            </div>
            <br>
            <h2>Variables</h2>
            <div class="input-group" style="padding-top:3%;">
                <select id="variablePicker" class="selectpicker" multiple data-max-options="1" data-width="100%" data-size="5" required>
                    {{!-- <option value="1" data-content="<span class='badge text-bg-dark'>Popularity</span>" selected>Popularity</option> --}}
                    {{!-- <option value="2" data-content="<span class='badge text-bg-dark'>Release Date</span>">Release Date</option> --}}
                    <option class="nonscale" value="duration_ms" data-content="<span class='badge text-bg-dark'>Duration</span>">Duration</option>
                    <option value="danceability" selected data-content="<span class='badge text-bg-dark'>Danceability</span>">Danceability</option>
                    <option value="energy" data-content="<span class='badge text-bg-dark'>Energy</span>">Energy</option>
                    <option class="nonscale" value="loudness" data-content="<span class='badge text-bg-dark'>Loudness</span>">Loudness</option>
                    <option value="speechiness" data-content="<span class='badge text-bg-dark'>Speechiness</span>">Speechiness</option>
                    <option value="acousticness" data-content="<span class='badge text-bg-dark'>Acousticness</span>">Acousticness</option>
                    <option value="instrumentalness" data-content="<span class='badge text-bg-dark'>Instrumentalness</span>">Instrumentalness</option>
                    <option value="liveness" data-content="<span class='badge text-bg-dark'>Liveness</span>">Liveness</option>
                    <option value="valence" data-content="<span class='badge text-bg-dark'>Valence</span>">Valence</option>
                    <option class="nonscale" value="tempo" data-content="<span class='badge text-bg-dark'>Tempo</span>">Tempo</option>
                    <option class="nonscale" value="time_signature" data-content="<span class='badge text-bg-dark'>Time Signature</span>">Time Signature</option>
                    <option class="nonscale" value="key" data-content="<span class='badge text-bg-dark'>Key</span>">Key</option>
                    <option class="nonscale" value="mode" data-content="<span class='badge text-bg-dark'>Mode</span>">Mode</option>
                </select>
            </div>
            <a class="btn btn-spotify-inversed col-8" href="#" onclick="renderGraph()" style="margin-top:5%">Generate Graph</a>
        </form>
    </div>
    <p class="footer">
        <span class="line">What do these variables measure? <a class="underline" href="/learn">Learn more</a>.</span>
    </p>
</div>

<div id="backRight">
    <div id="right" class="overflow-hidden">
        <div class="toast-container position-fixed end-0 p-3" style="z-index: 11; top:56px;">
            <div id="liveToast" class="toast hide text-bg-danger" role="alert" aria-live="assertive" aria-atomic="true" style="margin-bottom: 10px">
                <div class="toast-body text-center" id="toast-msg-text"></div>
            </div>
            <div id="liveToast2" class="toast hide " style="margin-bottom: 10px" role="alert" aria-live="assertive" aria-atomic="true" data-bs-autohide="false" data-bs-animation="false">
                <div class="toast-header">
                    <img style="height: 15px;" src="https://cdn-icons-png.flaticon.com/512/174/174872.png" class="rounded me-2" alt="Spotify">
                    <strong class="me-auto">Spotify</strong>
                    <a href="#" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></a>
                </div>
                <div class="toast-body" style="color:black">
                    Now playing: <span id="toast-msg-text2"></span>
                </div>
            </div>
        </div>
        <div id="graph" style="margin-left: 10%; margin-right: 10%; width: 90%;height:60%"> </div>
        <div class="row">
            <div class="col-4">
                <a class="btn btn-spotify-inversed" onclick="saveGraph()" style="margin-top:5%; border-radius: 100%;"><i class="fa fa-plus"></i></a>
            </div>
            <div class="col-4">
                <a class="btn btn-spotify-inversed" onclick="downloadImage()" style="margin-top:5%; border-radius: 100%;"><i class="fa fa-download"></i></a>
            </div>
            <div class="col-3">
                <a class="btn btn-spotify-inversed" onclick="sharePlaylist()" style="margin-top:5%; border-radius: 100%;"><i class="fa fa-share"></i></a>
            </div>
        </div>
        <br>
        <div id="shareContainer" class="row" style="width: 60%; opacity: 0">
            <div class="input-group mb-3 col-12">
                <input id="shareInput" type="text" class="form-control" disabled aria-describedby="button-addon2">
                <button class="btn btn-secondary" type="button" id="button-addon2" onclick="copyShare()"><i class="fa fa-copy"></i></button>
            </div>
        </div> 
        <p class="footer" id="listenText" style="opacity:0; margin-left:10%">
            <span class="line">Click a song to listen.</span>
        </p> 
    </div>  
</div>

{{#section 'script'}}
<script type="application/javascript" id="dynamicScript">

document.body.removeEventListener("wheel", scrollHandler, { passive: false });
var xhr = new XMLHttpRequest();
var myChart, curType = "bar", curVars = ['danceability'];
var playerId;
$.getJSON('/assets/chalk.project.json', function(themeJSON) {
    echarts.registerTheme('chalk', themeJSON);
    myChart = echarts.init(document.getElementById('graph'), themeJSON['theme']);
    myChart.on('click', 'series', function (e) {
        var track_uri = e.data[e.data.length - 1];
        if (playerId != null) {
            $.ajax({
                'type': 'GET',
                'url': '/api/playback/play?device_id=' + playerId + '&uri=' + encodeURIComponent(track_uri),
                'dataType': 'json'
            })
        }
    });
});

window.onSpotifyWebPlaybackSDKReady = () => {
    $.ajax({
        'type': 'GET',
        'url': '/api/auth/session',
        'dataType': 'json'
    }).done(function(data) {
        const token = data.result.token.access_token;
        player = new Spotify.Player({
            name: 'SmartLists',
            getOAuthToken: cb => { cb(token); },
            volume: 0.5
        });
        player.on('initialization_error', function(e) { console.error(e); });

    // Ready
    player.addListener('ready', ({ device_id }) => {
        console.log('Ready with Device ID', device_id);
        playerId = device_id;
        document.getElementById('listenText').style.opacity = 1;
        
        document.getElementById('liveToast2').addEventListener('hide.bs.toast', () => {
            $.ajax({
                    'type': 'GET',
                    'url': '/api/playback/pause?device_id=' + playerId,
                    'dataType': 'json'
                });
        })


    });

    player.addListener('player_state_changed', ({
            position,
            duration,
            paused,
            track_window: { current_track }
            }) => {
            if (paused || duration == position) {
                $('#liveToast2').toast('hide')
            } else {
                const errorToast = document.getElementById('liveToast2');
                const toastMsg = document.getElementById('toast-msg-text2');
                if (current_track.artists.length >= 1) {
                    toastMsg.innerHTML = current_track.name + " - " + current_track.artists[0].name;
                } else {
                    toastMsg.innerHTML = current_track.name;
                }
                const toast = new bootstrap.Toast(errorToast);
                toast.show();
                }
            });

    // Not Ready
    player.addListener('not_ready', ({ device_id }) => {
        console.log('Device ID has gone offline', device_id);
    });

    player.addListener('initialization_error', ({ message }) => {
        console.error(message);
    });

    player.addListener('authentication_error', ({ message }) => {
        console.error(message);
    });

    player.addListener('account_error', ({ message }) => {
        console.error(message);
    });

    player.connect();
});
}
if (findGetParameter('first') == 'false') {
    document.getElementById('pageTitle').innerHTML = "Configure your graph";
}

var jsonData;
$(document).ready(function() {
    var script = document.createElement("script");
    script.src = "https://sdk.scdn.co/spotify-player.js"; 
   
    document.body.appendChild(script); 
        $.ajax({
            'type': 'GET',
            'url': '/api/playlists/' + findGetParameter('id') + '/metadata',
            'dataType': 'json'
        }).done(function(data) {
            jsonData = data.result;
            barGraph(jsonData, ['danceability']);
            
        });
        window.onresize = function() {
            myChart.resize();
        };    
    });


    $('#left').ready(function() {
        $('#graphPicker').selectpicker();
        $('#variablePicker').selectpicker({
                multipleSeparator: ' '
            });
            
    });
    $('#graphPicker').on('changed.bs.select', function (e, clickedIndex, isSelected, previousValue) {
        $('#variablePicker').selectpicker('deselectAll');
        $('#variablePicker').selectpicker('destroy');
        var val = $(this).val();
        var optionCount = 1;
        // Set the max number of variables per graph here
        var nonscale = document.querySelectorAll('.nonscale')
        nonscale.forEach(function(element) {
            element.removeAttribute("disabled");
        });
        switch(val) {
            case "bar":
                optionCount = 1;
                break;
            case "scatter":
                optionCount = 2;
                break;
            case "scatter3d":
                optionCount = 3;
                break;
            case "bar3d":
                optionCount = 3;
                nonscale.forEach(function(element) {
                    element.setAttribute("disabled", "disabled");
                });
                break;
            default:
                break;
        }
        $('#variablePicker').selectpicker({
            maxOptions: optionCount,
            multipleSeparator: ' '
        });
    });

    function renderGraph() {
        document.getElementById("shareContainer").style.opacity = 0;
        var graphType = $('#graphPicker').val();
        curType = graphType;
        var variables = $('#variablePicker').val();
        curVars = variables;
        // Call graph rendering function here
        switch(graphType) {
            case "bar":
                barGraph(jsonData, variables);
                break;
            case "scatter":
                scatterPlot(jsonData, variables);
                break;
            case "scatter3d":
                scatter3d(jsonData, variables);
                break;
            case "bar3d":
                bar3d(jsonData, variables);
                break;
            default:
                break;
        }
    }
    function downloadImage() {
        var a = document.createElement("a");
        a.href = myChart.getDataURL({ pixelRatio: 2 });
        a.download = "chart.png";
        a.click();
        }

    function sharePlaylist() {
        $.ajax({
                type: 'POST',
                url: '/api/playlists/'+ findGetParameter('id') + '/share',
                data: JSON.stringify({
                    'graphType': curType,
                    'variables': curVars
                }),
                contentType: "application/json;charset=utf-8",
                success: function(data) {
                    $('#shareInput').val(data.result);
                    document.getElementById("shareContainer").style.opacity = 1;
                }
            });
    }

    function saveGraph() {
        $.ajax({
                type: 'POST',
                url: '/api/playlists/'+ findGetParameter('id') + '/save',
                data: JSON.stringify({
                    'graphType': curType,
                    'variables': curVars,
                    'image': myChart.getDataURL({ pixelRatio: 0.4 }),
                    'title': jsonData.title
                }),
                contentType: "application/json;charset=utf-8",
                success: function(data) {
                    window.location = "/overview";
                }
            });
    }

    function copyShare() {
        var copyText = document.getElementById("shareInput");
        copyText.select();
        copyText.setSelectionRange(0, 99999); /* For mobile devices */
        navigator.clipboard.writeText(copyText.value);
    }

    pjax.refresh();
</script>
{{/section}}